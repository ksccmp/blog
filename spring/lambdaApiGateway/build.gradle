// Lambda Deploy
import com.github.jengelman.gradle.plugins.shadow.transformers.*

// Lambda Deploy
buildscript {
	dependencies {
		classpath "com.github.jengelman.gradle.plugins:shadow:5.1.0"
		classpath("org.springframework.boot.experimental:spring-boot-thin-gradle-plugin:1.0.28.RELEASE")
	}
}

plugins {
	id 'java'
	id 'org.springframework.boot' version '2.7.8'
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'
}

group = 'com.lambda.apiGateway'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	// Lambda Local
	implementation 'org.springframework.cloud:spring-cloud-function-web:3.2.8'

	// Lambda Deploy
	implementation 'org.springframework.cloud:spring-cloud-function-adapter-aws:3.2.8'
	implementation 'com.amazonaws:aws-lambda-java-events:3.11.0'
	implementation 'com.amazonaws:aws-lambda-java-core:1.2.2'
}

// Lambda Deploy
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'org.springframework.boot.experimental.thin-launcher'
assemble.dependsOn = [shadowJar, thinJar]

// Lambda Deploy
shadowJar {
	classifier = 'aws'
	dependencies {
		exclude(
				dependency("org.springframework.cloud:spring-cloud-function-web:3.2.8"))
	}
	// Required for Spring
	mergeServiceFiles()
	append 'META-INF/spring.handlers'
	append 'META-INF/spring.schemas'
	append 'META-INF/spring.tooling'
	transform(PropertiesFileTransformer) {
		paths = ['META-INF/spring.factories']
		mergeStrategy = "append"
	}
}

tasks.named('test') {
	useJUnitPlatform()
}
